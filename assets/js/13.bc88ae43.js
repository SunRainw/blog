(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{518:function(s,t,a){s.exports=a.p+"assets/img/002-01.6909273d.jpeg"},519:function(s,t,a){s.exports=a.p+"assets/img/002-02.6eb3874c.jpeg"},561:function(s,t,a){"use strict";a.r(t);var n=a(5),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"javascript中的垃圾"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript中的垃圾"}},[s._v("#")]),s._v(" JavaScript中的垃圾")]),s._v(" "),n("ul",[n("li",[s._v("JS中的内存管理是自动的")]),s._v(" "),n("li",[s._v("当创建一个新的对象(数组、函数等)时，会创建一个新的内存空间，当该对象不再被引用时就会成为垃圾")]),s._v(" "),n("li",[s._v("对象不能从根上访问到时就是垃圾")])]),s._v(" "),n("h2",{attrs:{id:"javascript中的可达对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript中的可达对象"}},[s._v("#")]),s._v(" JavaScript中的可达对象")]),s._v(" "),n("ul",[n("li",[s._v("可访问到的对象就是可达对象(引用、作用域链)")]),s._v(" "),n("li",[s._v("可达的标准就是从根出发是否能找到")]),s._v(" "),n("li",[s._v("JavaScript中的根就是可以理解为全局变量对象")])]),s._v(" "),n("h2",{attrs:{id:"javascript中的引用与可达"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript中的引用与可达"}},[s._v("#")]),s._v(" JavaScript中的引用与可达")]),s._v(" "),n("p",[s._v("引用示例如下：")]),s._v(" "),n("div",{staticClass:"language-javaScript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rain"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建了一个rain的空间，相当于当前空间被rain所引用了")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从全局看obj是可以被全局所找到，即该对象是可达的")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" sun "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时rain的空间就多了一次引用，引用数值就发生了变化(后续引用计数算法中会用到)")]),s._v("\n\nobj "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// obj对rain空间的引用断掉了")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 但实际上，它还是可达的，以为sun还在引用obj")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("可达示例如下：")]),s._v(" "),n("div",{staticClass:"language-javaScript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("objGroup")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 函数接收两个变量，然后让其互相指引，再返回")]),s._v("\n    obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj2\n    obj2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prev "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj1\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        o1"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" obj1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        o2"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" obj2\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("objGroup")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"obj1"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"obj2"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("o1 "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 断掉obj到o1空间的引用，通过断掉ojb2通过prev对o1空间的引用")]),s._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("p",[s._v('分析：通过objGroup({ name: "obj1" }, { name: "obj2" })创建了一个可达对象obj，它有两个属性o1和o2，o1和o2分别指向各自的空间，同时o1通过next属性指向了o2的空间，o2通过prev属性指向了o1的空间，即o1和o2做了一个互相的引用，这样代码里所有的对象都可以通过根去查找，详见图1。')])]),n("p",[n("img",{attrs:{src:a(518),alt:"可达"}}),s._v("\n图1")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("p",[s._v("分析：当发生delete obj.o1之后，obj通过o1属性指向o1空间的引用就断了，通过obj2通过prev属性指向o1的路也断了。但是o1空间并没有立即清除，在GC垃圾回收开始之前，就无法访问了，如图2所示。")])]),n("p",[n("img",{attrs:{src:a(519),alt:"断掉引用"}}),s._v("\n图2")]),s._v(" "),n("h2",{attrs:{id:"gc算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gc算法"}},[s._v("#")]),s._v(" GC算法")]),s._v(" "),n("h3",{attrs:{id:"gc定义与作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gc定义与作用"}},[s._v("#")]),s._v(" GC定义与作用")]),s._v(" "),n("ul",[n("li",[s._v("GC就是垃圾回收机制的简写")]),s._v(" "),n("li",[s._v("GC可以找到内存中的垃圾、并释放和回收空间")])]),s._v(" "),n("h3",{attrs:{id:"gc里的垃圾是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gc里的垃圾是什么"}},[s._v("#")]),s._v(" GC里的垃圾是什么")]),s._v(" "),n("ol",[n("li",[s._v("程序中不再需要使用的对象")])]),s._v(" "),n("div",{staticClass:"language-javaScript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lg'")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("${")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v(" is a coder")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当函数调用完成后，name就不再需要了，就会被回收")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[s._v("程序中不再访问到的对象")])]),s._v(" "),n("div",{staticClass:"language-javaScript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lg'")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("${")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[s._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v(" is a coder")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当函数调用完成后，外部空间无法访问到name，也就找不到它了，就当成垃圾回收了")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"gc算法是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gc算法是什么"}},[s._v("#")]),s._v(" GC算法是什么")]),s._v(" "),n("ul",[n("li",[s._v("GC是一种机制，垃圾回收器完成具体的工作")]),s._v(" "),n("li",[s._v("工作的内容就是查找垃圾、释放空间、回收空间")]),s._v(" "),n("li",[s._v("算法就是工作时查找和回收所遵循的规则")])])])}),[],!1,null,null,null);t.default=r.exports}}]);