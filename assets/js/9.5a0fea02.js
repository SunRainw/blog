(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{448:function(s,t,a){s.exports=a.p+"assets/img/003-01.458ba843.jpeg"},449:function(s,t,a){s.exports=a.p+"assets/img/003-02.61524a00.jpeg"},450:function(s,t,a){s.exports=a.p+"assets/img/003-03.51e46b1d.jpeg"},451:function(s,t,a){s.exports=a.p+"assets/img/003-04.f337531d.jpeg"},452:function(s,t,a){s.exports=a.p+"assets/img/003-05.af51dd03.jpeg"},517:function(s,t,a){"use strict";a.r(t);var n=a(1),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"常见gc算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见gc算法"}},[s._v("#")]),s._v(" 常见GC算法")]),s._v(" "),t("ol",[t("li",[s._v("引用计数")]),s._v(" "),t("li",[s._v("标记清除")]),s._v(" "),t("li",[s._v("标记整理")]),s._v(" "),t("li",[s._v("分代回收")])]),s._v(" "),t("h2",{attrs:{id:"引用计数算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用计数算法"}},[s._v("#")]),s._v(" 引用计数算法")]),s._v(" "),t("ul",[t("li",[s._v("核心思想：\n"),t("ul",[t("li",[s._v("设置引用计数，判断当前引用数是否为0，来决定其是否是一个垃圾对象；")]),s._v(" "),t("li",[s._v("当计数变为0，gc就开始对其进行回收释放再使用")])])])]),s._v(" "),t("ul",[t("li",[s._v("引用计数器：\n"),t("ul",[t("li",[s._v("引用关系改变时就会修改当前对象对应的引用数值")]),s._v(" "),t("li",[s._v("例如： 代码中一个对象，有一个变量指向它就将它的引用数加1")]),s._v(" "),t("li",[s._v("当引用数字为0时，就立即回收")])])])]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("div",{staticClass:"language-javaScript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" user1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" user2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" user3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" nameList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("user1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" user3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有关键字，挂载在window下")]),s._v("\n    num2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在全局作用域下，可以访问user1，user2，user3，num1，num2，它们的引用计数都不是0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 然后修改fn")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" num2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时添加了关键字，num1和num2就不在全局作用域下")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当函数执行完毕后，全局作用域下就无法访问num1和num2，其引用计数就变成0，就会被回收")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当js代码执行一遍后，发现user1、user2、user3都还被userList引用着，就不会回收")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("ul",[t("li",[s._v("由此可见，引用计数算法就是依赖判断对象的引用计数是否为0来判断是否需要回收，所以缺陷很大")])]),s._v(" "),t("h3",{attrs:{id:"引用计数算法的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用计数算法的优缺点"}},[s._v("#")]),s._v(" 引用计数算法的优缺点")]),s._v(" "),t("h4",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),t("ul",[t("li",[s._v("发现垃圾时立即回收")]),s._v(" "),t("li",[s._v("最大限度减少程序暂停\n"),t("ul",[t("li",[s._v("由于堆内存有限，chrome默认限制1.4G")]),s._v(" "),t("li",[s._v("应用程序在执行过程中必然要消耗内存，就会存在内存沾满")]),s._v(" "),t("li",[s._v("引用计数算法时刻监控引用对象，当引用对象的引用计数为0时，就会立即进行是否回收，也就会降低了内存沾满的风险，从而减少程序的暂停")])])])]),s._v(" "),t("h4",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),t("ul",[t("li",[s._v("无法回收循环引用的对象")]),s._v(" "),t("li",[s._v("时间开销大\n"),t("ul",[t("li",[s._v("时刻监控当前对象的引用数值是否需要修改")]),s._v(" "),t("li",[s._v("引用数值的修改就需要时间，当有很多对象都需要修改引用数值，就会导致时间开销变大")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("循环引用示例")])]),s._v(" "),t("div",{staticClass:"language-javaScript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" obj1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" obj2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    obj1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj2\n    ojb2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj1\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'lg is coder'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("分析：当fn调用完成后，obj1和obj2就不再在全局访问，此时引用计数就应该为0，但是当我们去找寻obj1准备将其删除时发现，obj2的name属性还在引用着obj1(obj2同理)，就导致了此时obj1和obj2的引用计数不是0，就不会去回收他们，就造成了内存空间的浪费。")])]),t("h2",{attrs:{id:"标记清除算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记清除算法"}},[s._v("#")]),s._v(" 标记清除算法")]),s._v(" "),t("ul",[t("li",[s._v("核心思想：分标记和清除两个阶段完成\n"),t("ul",[t("li",[s._v("遍历所有可达对象，去标记活动的对象")]),s._v(" "),t("li",[s._v("遍历所有对象清除没有标记的对象")]),s._v(" "),t("li",[s._v("回收相应的空间")])])])]),s._v(" "),t("p",[t("img",{attrs:{src:a(448),alt:"标记清除算法图示"}}),s._v("\n图一")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("分析：标记清除算法会从根(global)去找到所有可达的对象，如果该对象有子对象就会递归找到其子对象，进行标记")]),s._v(" "),t("p",[s._v("但是a1和b1是不可达的对象，就不会做标记，就会被GC进行回收")])]),t("h3",{attrs:{id:"标记清除算法的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记清除算法的优缺点"}},[s._v("#")]),s._v(" 标记清除算法的优缺点")]),s._v(" "),t("h4",{attrs:{id:"优点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),t("ul",[t("li",[s._v("可以解决循环引用的对象无法回收的问题\n"),t("ul",[t("li",[s._v("由于标记清除算法判断的是该对象是否被标记，图1所示的a1和b1由于不可达，导致没有被标记，所以在回收阶段就会直接被回收，也就解决了循环引用的对象的回收问题")])])])]),s._v(" "),t("h4",{attrs:{id:"缺点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),t("ul",[t("li",[s._v("会导致空间碎片化，因为回收的垃圾的对象地址不连续，后续使用时无法一起使用")])]),s._v(" "),t("blockquote",[t("p",[s._v("如图例所示")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(449),alt:"标记清除算法缺点图示"}}),s._v("\n图二")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[s._v("分析：")]),s._v(" "),t("ol",[t("li",[s._v("将一个内存空间分为两个部分头(存储空间的源信息，例如：大小)和域(存储对象的信息)")]),s._v(" "),t("li",[s._v("如图2所示，假设将上图看做内存空间的3个部分，A代表根本可达对象空间(中间，已标记)，B和C代表左右不可达的对象空间(左右，为标记)，假设B占两个字的空间和C占一个字的空间，当B和C被垃圾回收后，看似释放了3个字的空间，但是B和C就被A这个3个字空间所分割，导致分配的空间时分散的(地址不连续)，")]),s._v(" "),t("li",[s._v("下一次对象分配空间时，假设一个1.5字空间大小的对象就无法放入C所在的内存空间中，而放入B中却又多了，这就导致了空间的碎片化。")])])]),t("h2",{attrs:{id:"标记整理算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记整理算法"}},[s._v("#")]),s._v(" 标记整理算法")]),s._v(" "),t("h3",{attrs:{id:"标记整理算法原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记整理算法原理"}},[s._v("#")]),s._v(" 标记整理算法原理")]),s._v(" "),t("ul",[t("li",[s._v("标记整理可以看做标记清除的增强")]),s._v(" "),t("li",[s._v("标记阶段的操作和标记清除一致")]),s._v(" "),t("li",[s._v("清除阶段会先执行整理，移动对象位置，再清除没有标记的对象")])]),s._v(" "),t("blockquote",[t("p",[s._v("阶段分析")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(450),alt:"回收前"}}),s._v(" "),t("img",{attrs:{src:a(451),alt:"整理后"}}),s._v(" "),t("img",{attrs:{src:a(452),alt:"回收后"}})]),s._v(" "),t("h2",{attrs:{id:"常见gc算法总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见gc算法总结"}},[s._v("#")]),s._v(" 常见GC算法总结")]),s._v(" "),t("ul",[t("li",[s._v("引用计数：通过一个对象的引用数值是否归零来决定是否清除\n"),t("ul",[t("li",[s._v("可以即时回收垃圾对象（优）")]),s._v(" "),t("li",[s._v("减少程序卡顿时间（优）")]),s._v(" "),t("li",[s._v("无法回收循环引用的对象（缺）")]),s._v(" "),t("li",[s._v("资源消耗较大，速度较慢（缺）")])])]),s._v(" "),t("li",[s._v("标记清除：分为标记和清除两个阶段，遍历对象标记活动对象，清除没有标记的对象并取消所以标记\n"),t("ul",[t("li",[s._v("可以回收循环引用的对象（优）")]),s._v(" "),t("li",[s._v("容易产生碎片化空间，浪费空间（缺）")]),s._v(" "),t("li",[s._v("不会立即回收垃圾对象（缺）")])])]),s._v(" "),t("li",[s._v("标记整理：跟标记清除类似，只是在清除之前先整理空间\n"),t("ul",[t("li",[s._v("减少碎片化空间（优）")]),s._v(" "),t("li",[s._v("不会立即回收垃圾对象（缺）")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);