{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{475:function(s,t,a){\"use strict\";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[t(\"h2\",{attrs:{id:\"gulp构建过程核心工作原理\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gulp构建过程核心工作原理\"}},[s._v(\"#\")]),s._v(\" Gulp构建过程核心工作原理\")]),s._v(\" \"),t(\"p\",[s._v(\"构建过程：任务中需要做的具体工作，大多数情况下都是将文件读出来然后进行一些转换最后写入到另外一个位置。\")]),s._v(\" \"),t(\"p\",[s._v(\"如果没有构建工具。通常都是人为手动的去解决这些问题\")]),s._v(\" \"),t(\"p\",[s._v(\"例如：我们要压缩一个css文件，需要将css文件复制出来，然后使用压缩工具压缩，复制压缩后的代码，然后放入到一个新的文件中，而通过gulp来创建一个压缩任务就能减少人工的操作。\")]),s._v(\" \"),t(\"p\",[s._v(\"主要分为3个部分：\")]),s._v(\" \"),t(\"ol\",[t(\"li\",[s._v(\"读取文件（输入）\")]),s._v(\" \"),t(\"li\",[s._v(\"压缩文件（加工）\")]),s._v(\" \"),t(\"li\",[s._v(\"写入文件（输出）\")])]),s._v(\" \"),t(\"div\",{staticClass:\"language-javaScript line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" fs \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"require\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'fs'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" Transform \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"require\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"stream\"')]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\\nexports\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function-variable function\"}},[s._v(\"default\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=>\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 文件读取流\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" read \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" fs\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"createReadStream\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'normalize.css'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 文件写入流\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" write \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" fs\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"createWriteStream\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'normalize.min.css'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 文件转换流\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" transform \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Transform\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token function-variable function\"}},[s._v(\"transform\")]),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\":\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[s._v(\"chunk\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" encoding\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" callback\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=>\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 核心转换过程实现\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// chunk => 读取流中读取到的内容（Buffer）\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 通过toString的方式将它转换为字符串\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" input \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" chunk\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"toString\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 通过replace将空白字符串和注释全部去掉\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 反斜杠(\\\\)用来转义\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" output \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"  input\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"replace\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[s._v(\"/\")]),t(\"span\",{pre:!0,attrs:{class:\"token regex-source language-regex\"}},[s._v(\"\\\\s+\")]),t(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[s._v(\"/\")]),t(\"span\",{pre:!0,attrs:{class:\"token regex-flags\"}},[s._v(\"g\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"''\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"replace\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token regex\"}},[t(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[s._v(\"/\")]),t(\"span\",{pre:!0,attrs:{class:\"token regex-source language-regex\"}},[s._v(\"\\\\/\\\\*.+?\\\\*\\\\/\")]),t(\"span\",{pre:!0,attrs:{class:\"token regex-delimiter\"}},[s._v(\"/\")]),t(\"span\",{pre:!0,attrs:{class:\"token regex-flags\"}},[s._v(\"g\")])]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"''\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// callback是一个错误优先的回调函数，第一参数需要传入错误，如果没有错误可以传入null\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"callback\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"null\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" output\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n            \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// output就会作为转换完的结果往后继续导出\")]),s._v(\"\\n        \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 把读取出来的文件流导入写入文件流\")]),s._v(\"\\n\\n    read\\n      \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"pipe\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"transform\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 转换\")]),s._v(\"\\n      \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"pipe\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v(\"write\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"// 写入\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" readStream\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),t(\"br\")])]),t(\"p\",[s._v(\"上面就是gulp中一个常见工作的核心工作过程，在上述工作中，有三个核心的概念：读取流、转换流和写入流\")]),s._v(\" \"),t(\"p\",[s._v(\"通过读取流将需要的文件内容取出来，通过转换流将文件流转换为我们需要的格式文件流，最后通过写入流将转换后的文件流写入到目标文件中。\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"gulp\")]),s._v(\"的官方定义就是\"),t(\"strong\",[s._v(\"The Streaming build system\")])]),s._v(\" \"),t(\"p\",[s._v(\"gulp就是基于流的构建系统，主要是他希望实现一个构建管道的概念，这样做一些扩展插件的时候就会有一个统一的方式\")]),s._v(\" \"),t(\"h2\",{attrs:{id:\"文件操作api\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#文件操作api\"}},[s._v(\"#\")]),s._v(\" 文件操作API\")]),s._v(\" \"),t(\"p\",[s._v(\"gulp中专门提供了创建读取流和写入流的api\")]),s._v(\" \"),t(\"p\",[s._v(\"gulp暴露了\"),t(\"strong\",[s._v(\"src\")]),s._v(\"和\"),t(\"strong\",[s._v(\"dest\")]),s._v(\"方法用于处理计算机上的文件流\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"src\")]),s._v(\"接受一个blob参数，并从文件系统中读取文件然后生成一个stream的node流，他将所有匹配的文件读取到内存中并通过流进行处理\")]),s._v(\" \"),t(\"p\",[s._v(\"由\"),t(\"strong\",[s._v(\"src\")]),s._v(\"产生的流(stream)应当从任务(task)中返回并发出异步完成的信号\")]),s._v(\" \"),t(\"p\",[s._v(\"流(stream)体统的主要API是\"),t(\"strong\",[s._v(\"pipe()\"),t(\"strong\",[s._v(\"方法，用于连接\")]),s._v(\"转换流\")]),s._v(\"(Transform streams)或\"),t(\"strong\",[s._v(\"可写流\")]),s._v(\"(Wriable streams)\")]),s._v(\" \"),t(\"p\",[t(\"strong\",[s._v(\"dest\")]),s._v(\"接受一个输出目录作为参数，并且会产生一个node流，通常作为终止流(Terminator stream)。当它接收到通过\"),t(\"strong\",[s._v(\"管道\")]),s._v(\"(pipeline)传输的文件时，它会将文件内容及文件属性写入到指定的目录中。gulp还提供了\"),t(\"strong\",[s._v(\"symlink\")]),s._v(\"方法，其操作方式类似\"),t(\"strong\",[s._v(\"dest\")]),s._v(\"，但是创建的是链接而不是文件\")]),s._v(\" \"),t(\"p\",[s._v(\"大多数情况下，利用\"),t(\"strong\",[s._v(\"pipe()\"),t(\"strong\",[s._v(\"方法将插件放置在\")]),s._v(\"src\")]),s._v(\"和\"),t(\"strong\",[s._v(\"dest\")]),s._v(\"之间，并转换流（stream）中的文件。\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-javaScript line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" src\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" dest \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"require\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'gulp'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\\nexports\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"default \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"src\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v('\"src'),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/*.css)\\n      .pipe(dest('dist'))\\n}\\n\")])])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\")])]),t(\"h2\",{attrs:{id:\"插件使用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#插件使用\"}},[s._v(\"#\")]),s._v(\" 插件使用\")]),s._v(\" \"),t(\"p\",[s._v(\"使用\"),t(\"code\",[s._v(\"gulp-clean-css\")]),s._v(\"插件对css进行转换,使用\"),t(\"code\",[s._v(\"rename\")]),s._v(\"进行重命名\")]),s._v(\" \"),t(\"div\",{staticClass:\"language-javaScript line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\" src\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\",\")]),s._v(\" dest \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"require\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'gulp'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"const\")]),s._v(\" cleanCss \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"require\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'gulp-clean-css'\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\"\\n\\nexports\"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"default \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"src\")]),t(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),s._v('\"src'),t(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"/*.css)\\n      .pipe(cleanCss())\\n      .pipe(rename({ extname: '.min.css' })) //可以传入一个对象，对象中的extname代表新的扩展名\\n      .pipe(dest('dist'))\\n}\\n\")])])]),s._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),t(\"br\")])])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}